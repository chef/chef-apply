#
# Copyright:: Copyright (c) 2018 Chef Software Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

cli:
  telemetry_enabled: |
    Telemetry has been enabled by default for this beta release
    of Chef Workstation. The anonymous data we gather is used to
    determine how we can impove your Chef Workstation experience.

    To disable it, add the following entry to
    %1:

    [telemetry]
    enable=false

    For more information about what we data gather and additional opt-out
    options, please visit https://chef.sh/TODO.
  description: |
    Chef Run is a tool to execute ad-hoc tasks using Chef.
  creating_config: "Creating config file in %1."
  default_config_location: "Location of config file. Default: %1"
  identity_file: "SSH identity file to use when connecting. Keys loaded into ssh-agent will also be used."
  ssl:
    desc: "Use SSL for WinRM. Current default: %1"
    verify_desc: |
      Verify peer certificate when using SSL for WinRM
      Use --ssl-no-verify when using SSL for WinRM and
      the remote host is using a self-signed certificate.
      Current default: %1
  cookbook_repo_paths: "Comma separated list of cookbook repository paths."
  install_description: |
    Install Chef client on the target host(s) if it is not installed.
    This defaults to enabled - the installation will be performed
    if there is no Chef client on the target(s).
  user_description: |
    Username to use for authentication to the target(s). The same
    username will be used for all targets.
  password_description: |
    Password to use for authentication to the target(s). The same
    password will be used for all targets.
  protocol_description: |
    The protocol to use for connecting to targets.
    The default is '%2', and it can be changed in config.toml by
    setting 'connection.default_protocol' to a supported option.
  sudo:
    flag_description:
      sudo: "Whether to use root permissions on the target. Default: true"
      command: "Command to use for administrative/root access. Defaults to 'sudo'."
      options: |
        Options to use with the sudo command. If there are multiple flags,
        quote them. For example: --sudo-options '-H -P -s'
      password: |
        Password to use with the sudo command.  This must be provided if
        password is required for sudo on the target(s). The same sudo password
        will be used for all targets.
  help:
    description: Show help and usage for `chef-run`
  usage: |
    chef-run <TARGET[S]> <RESOURCE> <RESOURCE_NAME> [PROPERTIES] [FLAGS]
    chef-run <TARGET[S]> <RECIPE> [FLAGS]

  usage_full: |
    chef-run <TARGET[S]> <RESOURCE> <RESOURCE_NAME> [PROPERTIES] [FLAGS]

      Runs a single <RESOURCE> on the specified <TARGET[S]>.
      [PROPERTIES] should be specified as key=value.

      For example:

        chef-run web01 service nginx action=restart
        chef-run web01,web02 service nginx action=restart
        chef-run web0[1:2] service nginx action=restart

    chef-run <TARGET[S]> <RECIPE> [FLAGS]

      Runs a single recipe located at <RECIPE> on the specified <TARGET[S]>.

      For example:

        chef-run web01 path/to/cookbook/recipe.rb
        chef-run web01,web02 path/to/cookbook
        chef-run web0[1:2] cookbook_name
        chef-run web01 cookbook_name::recipe_name

    ARGUMENTS:
      <TARGET[S]>       The hosts or IPs to target. Can also be an SSH or WinRM URLs
                        in the form:

                        ssh://[USERNAME]@example.com[:PORT]
      <RESOURCE>        A Chef resource, such as 'user' or 'package'
      <RESOURCE_NAME>   The name, usually used to specify what 'thing' to set up with
                        the resource. For example, given resource 'user', 'name' would be
                        the name of the user you wanted to create.
      <RECIPE>          The recipe to converge. This can be provided as one of:
                        1. Full path to a recipe file
                        2. Cookbook name. First we check the working directory for this
                           cookbook, then we check in the chef repository path. If a
                           cookbook is found we run the default recipe.
                        3. This behaves similarly to 'cookbook name' above, but it also allows
                           you to specify which recipe to use from the cookbook.
  error:
    bad_config_file: |

      The path '%1' is not a valid file, or it cannot be read.

      Please verify that the path is correct, and that permissions
      on the file allow it to be read by your user account.

    missing_config_path: |

      Missing configuration file.

      Please provide the path to a valid chef-run configuration file
      as an argument to --config-path. For example:

        --config-path /home/user1/.chef-workstation/config.toml

    invalid_config_key: |

      Invalid configuration entry.

      When loading '%2',
      the configuration entry '%1' was not recognized.

      Please check the spelling and ensure that the value is correct.

    unknown_config_error: |

      Error in configuration file.

      When loading '%2',
      the following error occurred:
        %1

      Please verify that the configuration file is correct. If the
      problem continues, contact beta@chef.io for further assistance.

  version:
    description: Show the current version of Chef Run.
    show: "chef-run: %1"
  status:
    connecting: "Connecting as %1..."
    connected: "Connected."
    connection_failed: "Connection failed: %1"

status:
  generate_cookbook:
    generating: Packaging cookbook...
    success: Packaging cookbook... done!
  generate_policyfile:
    generating:  Generating local policyfile...
    success: Generating local policyfile... done!
  install_chef:
    installing: Installing Chef client version %1.
    checking_for_client: Checking for Chef client.
    upgrading: Upgrading Chef client from version %1 to %2.
    downloading: Downloading Chef client installer into local cache.
    uploading: Uploading Chef client installer to target.
    verifying: Verifying Chef client installation.
    already_present: Chef client version %1 already installed on target.
    install_success: Successfully installed Chef client version %1
    upgrade_success: Successfully upgraded Chef client from version %1 to %2.
    failure: "An error occurred while installing Chef client: %1"
  converge:
    header: !!pl
      1: Converging target...
      n: Converging targets...
    converging_recipe: Converging local recipe %1 on target...
    converging_resource: Converging %1 on target...
    creating_local_policy: Creating local policy...
    creating_remote_policy: Pushing remote policy to target...
    uploading_trusted_certs: Uploading local trusted certs to target...
    running_chef: Running Chef on target...
    success: "Successfully converged target!"
    failure: "Failed to converge target."
    reboot: "Reboot scheduled on target."

# Error definitions, usage Text.e.ERR999
# General format:
# First Line: brief description of the error
# Second line: blank
# Third+ : detailed description, max 76 characters per line
errors:
  # Catch-all for the worst case
  UNKNOWN: An unknown error has occurred.

  # Installer action errors
  CHEFINS002: |
    The target does not have chef-client installed.

    This command is powered by the Chef client.  In order to make use of it
    on this node, the Chef client must be installed first.

    Re-running this command without the '--no-install' flag will
    automatically perform the installation.

  CHEFINS003: |
    The target has an older version of Chef client installed.

    The target has version %1 installed, but this command
    requires a minimum version of %2.

    Please upgrade the Chef client on this node to version %2 or later.

  # Local errors trying to create policy to send to target
  CHEFPOLICY001: |
    Could not create local Policyfile bundle.

    The following error was reported:

      %1

  # Remote execution and file operation errors are prefixed CHEFRMT
  CHEFRMT001: |
    The command '%1' exited with return code '%2' on '%3'.

    The following error was reported:

      %4

  # Remote chef client run failure start here.
  CHEFCCR001: |
    Could not determine reason for converge failure.

    STDOUT (may be blank)

      %1

    STDERR (may be blank)

      %2

    An error occurred while converging the remote host.
    I was unable to retrieve the log file which would allow
    me to provide more information.  Above is the output
    that occurred while trying to retrieve the remote log file.

  CHEFCCR002: |
    The converge of the remote host failed for the
    following reason:

      %1

  CHEFCCR003: |
    The action '%1' is not valid.

    Valid actions are:

      %2

    For more information, please consult the documentation
    for this resource:

      https://docs.chef.io/resource_reference.html

  CHEFCCR004: |
    A property value you provided is not valid:

      %1

    Please consult the documentation for properties
    supported by your resource and their valid values:

      https://docs.chef.io/resource_reference.html

  CHEFCCR005: |
    '%1' is not a valid Chef resource.

    Please consult the documentation for a list of valid resources:

      https://docs.chef.io/resource_reference.html

  CHEFCCR006: |
    '%1' is not a property of '%2'.

    Please consult the documentation for %2 for a list of
    valid properties:

      https://docs.chef.io/resource_reference.html

  CHEFCCR099: |
    The converge of the remote host failed.

    Please examine the log file for a detailed cause of failure.

  # Train-related errors (connectivy, auth failure, etc)
  # are prefixed CHEFTRN. Non-specific descendants of Train::Error
  # will resolve to CHEFTRN001, and we can add additional
  # more specific text as we need it.
  CHEFTRN001: |
    An error has occurred on the %1 connection to %2:

    %2.

  CHEFTRN002: |
    An remote error has occurred:

      %1.

  CHEFTRN003: |
    Password required for sudo.

    This target requires a password to perform sudo operations.  Please provide a
    password using the --sudo-password option. For example if the sudo password is
    in the environment variable $CHEF_RUN_SUDO_PASSWORD, you could use:

    --sudo-password $CHEF_RUN_SUDO_PASSWORD

  CHEFTRN004: |
    Incorrect sudo password provided.

    Please ensure that the password you provided with "--sudo-password" is correct.

  CHEFTRN005: |
    sudo command '%1' not found.

    Please verify that the --sudo-command '%1' is valid
    and installed on this node.

  CHEFTRN006: |
    sudo requires tty on this system

    In order to continue, sudo must be configured to no longer require tty.
    You can do this by modifying /etc/sudoers:

    For all users:
      Defaults !requiretty

    Per-user:
      Defaults:username !requiretty

  CHEFTRN007: |
    No authentication methods available.

    Try...
    - Provide a password with "--password PASSWORD"
    - Provide a key with "-identity-file PATH/TO/FILE"
    - Enable ssh-agent and add keys
    - Add a host entry to your ssh configuration

    Additional instructions can be found in the troubleshooting documentation:

    https://www.chef.sh/docs/chef-workstation/troubleshooting/#error-code-cheftrn007

  CHEFTRN999: |
    Connection failed: %1

    The following error occured while attempting to connect and authenticate to the target.

    %1

  # CLI argument validation errors
  CHEFVAL002: |
    You must supply <TARGET[S]> and either <RESOURCE> and <RESOURCE_NAME> or <RECIPE>

  CHEFVAL003: |
    Property '%1' did not match the 'key=value' syntax required

  CHEFVAL004: |
    Please provide a recipe in the form 'path/to/recipe/file.rb',
    'path/to/cookbook', 'cookbook_name' or 'cookbook_name::recipe_name'.

    You provided '%1'.

  CHEFVAL005: |
    The cookbook provided could not be loaded. Ensure it contains a valid
    'metadata.rb'.

    Cookbook path is '%1'.

  CHEFVAL006: |
    Cookbook '%1' could not be found in any of the following directories

    %2

  CHEFVAL007: |
    There is no default recipe in cookbook '%2'. Please provide the name of the recipe to run, for example:
      %2::some_recipe

    Cookbook path is '%1'.

  CHEFVAL008: |
    There is no recipe named '%2' in the cookbook '%4', which I found at '%1'.

    Please include the name of the recipe you wish to converge on the remote target.

    These are the available recipes in '%4':
    %3

  CHEFVAL009: |
    File extension '%1' is unsupported. Currently recipes must be specified with a `.rb` extension.

  CHEFVAL010: |
    The flag '%1' does not exist.

      Available flags are:
    %2

  CHEFVAL011: |
    The protocol '%1' is not supported.

    Currently supported remote access protocols are:

      %2

  # General errors/unknown errors are handled with CHEFINT
  CHEFINT001: |
    An unexpected error has occurred:

      %1

  # Maps to: NameError
  CHEFNET001: |
    A network error occurred:

      %1

    Please verify the host name or address is correct and that the host is
    reachable before trying again.

  # Remote chef client run failure start here.
  CHEFUPL003: |
    Uploading config to target failed.

  CHEFUPL004: |
    Uploading handler to target failed.

  CHEFUPL005: |
    Uploading policy bundle to target failed.

  # Maps to: SSL::SSLError with message text indicating verification failure
  CHEFNET002: |
    SSL host verification failed.

    I could not verify the identity of the remote host.

    If you are certain that you are connecting to the correct host,
    you can specify the '--no-ssl-verify' option for this command, or
    make it the default by setting the following in your configuration:

      [connection.winrm]
      ssl_verify=false

  # Errors specifying target ranges
  CHEFRANGE001: |
    The target '%1' contains an invalid range.

    The range '%2' mixes alphabetic and numeric values.
    A range must be one or the other.

  CHEFRANGE002:
    The target '%1' contains too many ranges.

    A single target name can contain up two ranges.

  CHEFRANGE003: !!pl
    1:
      The target provided resolves to too many hosts.

      At this time there is a limit of %2 hosts in a single operation.
    n:
      The targets provided resolve to too many hosts.

      At this time there is a limit of %2 hosts in a single operation.

  # Errors related to multi-target execution
  CHEFMULTI001: |
    One or more actions has failed.

    A complete list of failures and possible resolutions can
    be found in the file below:

      %1

  # Errors relating to target state:
  CHEFTARG001: |
    '%1' is not a supported target operating system at this time.

    We plan to support a range of target operating systems,
    but during this targeted beta we are constraining our efforts
    to Windows and Linux.

  footer:
    both: |
      If you are not able to resolve this issue, please contact Chef support
      at beta@chef.io and include the log file and stack trace from the
      locations below:

        %1
        %2

    log_only:  |
      If you are not able to resolve this issue, please contact Chef support
      at beta@chef.io and include the log file from the location below:
        %1

    stack_only:  |
      If you are not able to resolve this issue, please contact Chef support
      at beta@chef.io and include the stack trace from the location below:
        %1

    neither:  |
      If you are not able to resolve this issue, please contact Chef support
      at beta@chef.io
